/* 
 * Copyright (C) 2013 Alex Bikfalvi
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

using System;
using System.Runtime.Serialization;

namespace InetCommon.Tools
{
	/// <summary>
	/// A class representing a tool exception.
	/// </summary>
	[Serializable]
	public class ToolException : ApplicationException
	{
		/// <summary>
		/// Creates a new tool exception instance.
		/// </summary>
		/// <param name="message">The exception message.</param>
		public ToolException(string message)
			: base(message)
		{
		}

		/// <summary>
		/// Creates a new tool exception instance, when the exception is generated by a toolset.
		/// </summary>
		/// <param name="message">The exception message.</param>
		/// <param name="toolset">The toolset.</param>
		public ToolException(string message, ToolsetInfoAttribute toolset)
			: base(message)
		{
			this.Toolset = toolset;
		}

		/// <summary>
		/// Creates a new tool exception instance, when the exception is generated by a tool
		/// </summary>
		/// <param name="message">The exception message.</param>
		/// <param name="toolset">The toolset.</param>
		/// <param name="tool">The tool.</param>
		public ToolException(string message, ToolsetInfoAttribute toolset, ToolInfoAttribute tool)
			: base(message)
		{
			this.Toolset = toolset;
			this.Tool = tool;
		}

		/// <summary>
		/// Creates a new tool exception instance, when the exception is generated by a tool
		/// </summary>
		/// <param name="message">The exception message.</param>
		/// <param name="innerException">The inner exception.</param>
		/// <param name="toolset">The toolset.</param>
		/// <param name="tool">The tool.</param>
		public ToolException(string message, Exception innerException, ToolsetInfoAttribute toolset, ToolInfoAttribute tool)
			: base(message, innerException)
		{
			this.Toolset = toolset;
			this.Tool = tool;
		}

		/// <summary>
		/// Creates a new tool excpetion instance from the serialization information.
		/// </summary>
		/// <param name="info">The serialization information.</param>
		/// <param name="context">The streaming context.</param>
		protected ToolException(SerializationInfo info, StreamingContext context)
			: base(info, context)
        {
			// Check the arguments.
            if (info == null) throw new ArgumentNullException("info");
            // Set the local properties.
			this.Toolset = (ToolsetInfoAttribute) info.GetValue("Toolset", typeof(ToolsetInfoAttribute));
            this.Tool = (ToolInfoAttribute)info.GetValue("Tool", typeof(ToolInfoAttribute));
        }

		// Public properties.

		/// <summary>
		/// Gets the toolset that generated this exception.
		/// </summary>
		public ToolsetInfoAttribute Toolset { get; private set; }
		/// <summary>
		/// Gets the tool that generated this exception.
		/// </summary>
		public ToolInfoAttribute Tool { get; private set; }

		// Public methods.

		/// <summary>
		/// Gets the object data used for serialization.
		/// </summary>
		/// <param name="info">The serialization information.</param>
		/// <param name="context">The streaming context.</param>
		public override void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			// Call the base class method.
			base.GetObjectData(info, context);
			// Add the current properties.
			info.AddValue("Toolset", this.Toolset);
			info.AddValue("Tool", this.Tool);
		}
	}
}
